{"version":3,"sources":["App.tsx","index.js"],"names":["operations","generateRandomGrid","rows","i","push","Array","from","Math","random","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","style","display","onClick","backgroundColor","marginLeft","href","gridTemplateColumns","map","column","newGrid","width","height","undefined","border","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAOMA,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,IAWDC,EAAqB,WAEzB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAzBF,GAyBeA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAzBT,KAyByB,kBAAOE,KAAKC,SAAW,GAAM,EAAI,MAExE,OAAON,GA4GMO,EAzGO,WAAO,IAAD,EACFC,oBAAS,WAC/B,OAAOT,OAFiB,mBACnBU,EADmB,KACbC,EADa,OAKIF,oBAAS,GALb,mBAKnBG,EALmB,KAKVC,EALU,KAOpBC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAEhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAG,SAACE,GACjB,IAD+B,IAAD,WACrBnB,GACP,IAF4B,eAEnBoB,GAEP,IAAIC,EAAY,EAChBxB,EAAWyB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOzB,EAAIuB,EACXG,EAAON,EAAII,EAEbC,GAAQ,GAAKA,EAtDf,IAsDiCC,GAAQ,GAAKA,EArD9C,KAuDAL,GAAaJ,EAAEQ,GAAMC,OAIrBL,EAAY,GAAKA,EAAY,EAC/BF,EAASnB,GAAGoB,GAAK,EACI,IAAZH,EAAEjB,GAAGoB,IAA0B,IAAdC,IAC1BF,EAASnB,GAAGoB,GAAK,IAhBZA,EAAI,EAAGA,EA/CV,GA+CuBA,IAAM,EAA1BA,IADFpB,EAAI,EAAGA,EA9CR,GA8CqBA,IAAM,EAA1BA,SAwBb2B,WAAWZ,EAAe,QACzB,IAEH,OACE,qCACE,sBAAKa,MAAO,CAAEC,QAAS,QAAvB,UACE,wBACEC,QAAS,WACPnB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,MAGJa,MAAO,CAAEG,gBAAiBrB,EAAU,MAAQ,WAR9C,SAUGA,EAAU,OAAS,UAGtB,wBAAQoB,QAAS,kBAAMrB,EAAQX,MAA/B,mBAEA,wBACEgC,QAAS,WACPrB,EAAQX,MAFZ,oBAQA,sBAAM8B,MAAO,CAAEI,WAAY,QAA3B,SACE,mBAAGC,KAAK,wDAAR,wBAMJ,qBACEL,MAAO,CACLC,QAAS,OACTK,oBAAoB,UAAD,OA5Gb,GA4Ga,YAHvB,SAMG1B,EAAK2B,KAAI,SAACpC,EAAMwB,GAAP,OACRxB,EAAKoC,KAAI,SAACC,EAAQZ,GAAT,OACP,qBAEEM,QAAS,WACP,IAAMO,EAAUnB,YAAQV,GAAM,SAACW,GAC7BA,EAASI,GAAGC,GAAKhB,EAAKe,GAAGC,GAAK,EAAI,KAEpCf,EAAQ4B,IAEVT,MAAO,CACLU,MAAO,GACPC,OAAQ,GACRR,gBAAiBvB,EAAKe,GAAGC,GAAK,YAASgB,EACvCC,OAAQ,mBAZZ,UACUlB,EADV,YACeC,gBClH3BkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.13633520.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState } from \"react\";\nimport { produce } from \"immer\";\n\nconst numRows = 50;\nconst numCols = 50;\n\n//neighbors postitions of a cell\nconst operations = [\n  [0, 1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n  [0, -1],\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n  return rows;\n};\n\nconst generateRandomGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0)));\n  }\n  return rows;\n};\n\nconst App: React.FC = () => {\n  const [grid, setGrid] = useState(() => {\n    return generateRandomGrid();\n  });\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) return;\n\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numRows; k++) {\n            //compute numbers of neigbors\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              //check if not outside of grid\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                //increment if a neighbors is found\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <>\n      <div style={{ display: \"flex\" }}>\n        <button\n          onClick={() => {\n            setRunning(!running);\n            if (!running) {\n              runningRef.current = true;\n              runSimulation();\n            }\n          }}\n          style={{ backgroundColor: running ? \"red\" : \"#8bc34a\" }}\n        >\n          {running ? \"stop\" : \"start\"}\n        </button>\n\n        <button onClick={() => setGrid(generateRandomGrid())}>clear</button>\n\n        <button\n          onClick={() => {\n            setGrid(generateRandomGrid());\n          }}\n        >\n          random\n        </button>\n\n        <span style={{ marginLeft: \"auto\" }}>\n          <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">\n            Rules\n          </a>\n        </span>\n      </div>\n\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        }}\n      >\n        {grid.map((rows, x) =>\n          rows.map((column, y) => (\n            <div\n              key={`${x}-${y}`}\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[x][y] = grid[x][y] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[x][y] ? \"pink\" : undefined,\n                border: \"solid 1px grey\",\n              }}\n            ></div>\n          ))\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}